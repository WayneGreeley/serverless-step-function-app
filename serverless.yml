service: serverless-step-function-app

plugins:
  - serverless-step-functions
  # - serverless-plugin-aws-alerts

# custom:
#   alerts:
#     stages:
#       - dev
#     topics:
#       alarm:
#         topics:
#           alarm: 'arn:aws:sns:${opt:region, self:provider.region}:NotifyMe'
#         notifications:
#           - protocol: email
#             endpoint: it199@hotmail.com 
#     alarms:
#       - functionErrors
#       - functionThrottles

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev # Default stage to be used. Default is "dev"
  region: us-east-1 # Default region to be used. Default is "us-east-1"
  memorySize: 256
  timeout: 10

functions:
  hello:
    handler: index.handler

stepFunctions:
  stateMachines:
    MyExampleStepFunction:
      name: my-example
      events:
        - http:
            path: /
            method: POST
            
      definition:
        Comment: Demonstrate how the service integrations work
        StartAt: Publish SQS message
        States:

          Publish SQS message:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage
            Parameters:
              QueueUrl:
                Ref: MyQueue
              MessageBody: This is a static message
              MessageAttributes:
                foo:
                  DataType: String
                  StringValue: bar
            Next: Do Something

          Do Something:
            Type: Task
            Resource:
              Fn::GetAtt: [HelloLambdaFunction, Arn]
            Next: Publish SNS message
            
          Publish SNS message:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              Message: "{ \"answer\": 42 }"
              TopicArn:
                Ref: AlarmTopic
              MessageAttributes:
                foo:
                  DataType: String
                  StringValue: bar
            End: true

      alarms:
        topics: 
          alarm: 'arn:aws:sns:us-east-1:#{AWS::AccountId}:my-topic'
        metrics:
          - executionsFailed
          - executionsAborted
          - executionThrottled

#lambda function with params
            #Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-writeS3"
resources:
  Resources:
    AlarmTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: my-topic
        TopicName: my-topic
    MyQueue:
      Type: AWS::SQS::Queue
      Properties :
        QueueName : my-queue