service: serverless-step-function-app

plugins:
  - serverless-step-functions
  # - serverless-plugin-aws-alerts

# custom:
#   alerts:
#     stages:
#       - dev
#     topics:
#       alarm:
#         topics:
#           alarm: 'arn:aws:sns:${opt:region, self:provider.region}:NotifyMe'
#         notifications:
#           - protocol: email
#             endpoint: it199@hotmail.com 
#     alarms:
#       - functionErrors
#       - functionThrottles

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev # Default stage to be used. Default is "dev"
  region: us-east-1 # Default region to be used. Default is "us-east-1"
  memorySize: 256
  timeout: 10
  environment:
    DYNAMODB_TABLE: Fn::GetAtt: [SettingsTable, Arn]
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchGet*"
        - "dynamodb:DescribeTable"
        - "dynamodb:Get*"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:BatchWrite*"
        - "dynamodb:Update*"
        - "dynamodb:PutItem"
      Resource:
        Fn::GetAtt: [SettingsTable, Arn]

functions:
  hello:
    handler: index.handler

stepFunctions:
  stateMachines:
    MyExampleStepFunction:
      name: my-example
      events:
        - http:
            path: /
            method: POST
            
      definition:
        Comment: Demonstrate how the service integrations work
        StartAt: ParallelDivide
        States:
        
          ParallelDivide:
            Type: Parallel
            Next: Publish SNS message
            Branches:
              - StartAt: Publish SQS message
                States:

                  Publish SQS message:
                    Type: Task
                    InputPath: "$"
                    ResultPath: "$"
                    Resource: arn:aws:states:::sqs:sendMessage
                    Parameters:
                      QueueUrl:
                        Ref: MyQueue
                      MessageBody: This is a static message
                      MessageAttributes:
                        foo:
                          DataType: String
                          StringValue: bar
                    End: true

              - StartAt: Do Something
                States:
                  Do Something:
                    Type: Map
                    InputPath: "$.detail"
                    ItemsPath: "$.shipped"
                    Iterator:
                      StartAt: Process Item
                      States:
                        Process Item:
                          Type: Task
                          Resource:
                            Fn::GetAtt: [HelloLambdaFunction, Arn]
                          # Catch:
                          # - ErrorEquals:
                          #   - States.ALL
                          #   Next: Fail State
                          End: true
                    End: true
            
          Publish SNS message:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              Message: "{ \"answer\": 42 }"
              TopicArn:
                Ref: AlarmTopic
              MessageAttributes:
                foo:
                  DataType: String
                  StringValue: bar
            End: true
            
          # Fail State:
          #   Type: Fail
          #   Cause: "Unknown"

      alarms:
        topics: 
          alarm: 'arn:aws:sns:us-east-1:#{AWS::AccountId}:my-topic'
        metrics:
          - executionsFailed
          - executionsAborted
          - executionThrottled

#lambda function with params
            #Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-writeS3"
resources:
  Resources:
    AlarmTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: my-topic
        TopicName: my-topic
    MyQueue:
      Type: AWS::SQS::Queue
      Properties :
        QueueName : my-queue

    SettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: setting-table
        BillingMode: PROVISIONED
        AttributeDefinitions: 
          - AttributeName : CategoryKey
            AttributeType : S
          - AttributeName : SettingKey
            AttributeType : S
        KeySchema:
          - AttributeName: CategoryKey
            KeyType: HASH
          - AttributeName: SettingKey
            KeyType: Range
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5